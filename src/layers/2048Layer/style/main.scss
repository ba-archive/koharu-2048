@use "sass:list";
@use "sass:math";
@import "helpers";

@font-face {
  font-family: "Clear Sans";
  src: url(../assets/JetBrainsMono-ExtraBold.woff2) format("woff2");
}

@mixin styling($width, $spacing) {
  $field-width: $width;
  $grid-spacing: $spacing;
  $grid-row-cells: 4;
  $tile-size: calc(
    ($field-width - $grid-spacing * ($grid-row-cells + 1)) / $grid-row-cells
  );
  $tile-border-radius: 3px;

  $mobile-threshold: $field-width + 20px;

  $text-color: #776e65;
  $bright-text-color: #f9f6f2;

  $tile-color: #eee4da;
  $tile-gold-color: #edc22e;
  $tile-gold-glow-color: lighten($tile-gold-color, 15%);

  $game-container-margin-top: 40px;
  $game-container-background: #bbada0;

  $transition-speed: 100ms;

  @include keyframes(move-up) {
    0% {
      top: 25px;
      opacity: 1;
    }

    100% {
      top: -50px;
      opacity: 0;
    }
  }

  .container-main {
    width: $field-width;
  }

  @include keyframes(fade-in) {
    0% {
      opacity: 0;
    }

    100% {
      opacity: 1;
    }
  }

  // Game field mixin used to render CSS at different width
  .game-container {
    position: relative;
    padding: $grid-spacing;

    cursor: default;
    -webkit-touch-callout: none;
    -ms-touch-callout: none;

    user-select: none;

    -ms-touch-action: none;
    touch-action: none;

    background: rgba(80, 70, 80, 0.35);
    box-shadow: 1px 5px 10px rgba(0, 0, 0, 0.42);
    backdrop-filter: blur(6px);
    border-radius: $tile-border-radius * 2;
    width: $field-width;
    height: $field-width;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  }

  .grid-container {
    position: absolute;
    z-index: 1;
  }

  .grid-row {
    margin-bottom: $grid-spacing;

    &:last-child {
      margin-bottom: 0;
    }

    &:after {
      content: "";
      display: block;
      clear: both;
    }
  }

  .grid-cell {
    width: $tile-size;
    height: $tile-size;
    margin-right: $grid-spacing;
    float: left;

    border-radius: $tile-border-radius;

    background: rgba($tile-color, 0.35);

    &:last-child {
      margin-right: 0;
    }
  }

  .tile-container {
    position: absolute;
    z-index: 2;
  }

  .tile {
    &,
    .tile-inner {
      width: ceil($tile-size);
      height: ceil($tile-size);
    }

    // Build position classes
    @for $x from 1 through $grid-row-cells {
      @for $y from 1 through $grid-row-cells {
        &.tile-position-#{$x}-#{$y} {
          $xPos: floor(($tile-size + $grid-spacing) * ($x - 1));
          $yPos: floor(($tile-size + $grid-spacing) * ($y - 1));
          @include transform(translate($xPos, $yPos));
        }
      }
    }
  }

  .tile {
    position: absolute; // Makes transforms relative to the top-left corner

    .tile-inner {
      border-radius: $tile-border-radius;

      background: $tile-color;
      text-align: center;
      font-weight: bold;
      z-index: 10;

      .tile-number {
        background: rgba(#000000, 0.5);
        color: white;
        width: 100%;
        height: 0.3 * $tile-size;
        border-radius: 0 0 $tile-border-radius $tile-border-radius;
        position: absolute;
        bottom: 0;
        font-size: 0.23 * $tile-size;
      }
    }

    // Movement transition
    @include transition($transition-speed ease-in-out);
    -webkit-transition-property: -webkit-transform;
    -moz-transition-property: -moz-transform;
    transition-property: transform;

    $base: 2;
    $exponent: 1;
    $limit: 11;

    // Colors for all 11 states, false = no special color
    $special-colors: false false,
      // 2
      false false,
      // 4
      #f78e48 true,
      // 8
      #fc5e2e true,
      // 16
      #ff3333 true,
      // 32
      #ff0000 true,
      // 64
      false true,
      // 128
      false true,
      // 256
      false true,
      // 512
      false true,
      // 1024
      false true; // 2048

    // Build tile colors
    $bgColors: #ecf4fe #d9e7fc #b2cffa #8cb8f7 #65a0f5 #65a0f5 #4c91f5 #3383f5
      #1b74f5 #c89baa;
    $textColors: #333333 #333333 #333333 #ffffff #ffffff #ffffff #ffffff #ffffff
      #ffffff #ffffff;

    @for $i from 1 through 10 {
      $currentNumber: math.pow(2, $i + 1);
      &.tile-#{$currentNumber} .tile-inner {
        background-color: list.nth($bgColors, $i);
        color: list.nth($textColors, $i);
        background-image: url(../assets/number_item_#{$currentNumber}.png);
        background-repeat: no-repeat;
        background-size: contain;
        background-position: center;
      }
    }

    // Super tiles (above 2048)
    &.tile-super .tile-inner {
      color: $bright-text-color;
      background: mix(#333, $tile-gold-color, 95%);

      font-size: 30px;

      @include smaller($mobile-threshold) {
        font-size: 10px;
      }
    }
  }

  @include keyframes(appear) {
    0% {
      opacity: 0;
      @include transform(scale(0));
    }

    100% {
      opacity: 1;
      @include transform(scale(1));
    }
  }

  .tile-new .tile-inner {
    @include animation(appear 200ms ease $transition-speed);
    @include animation-fill-mode(backwards);
  }

  @include keyframes(pop) {
    0% {
      @include transform(scale(0));
    }

    50% {
      @include transform(scale(1.2));
    }

    100% {
      @include transform(scale(1));
    }
  }

  .tile-merged .tile-inner {
    z-index: 20;
    @include animation(pop 200ms ease $transition-speed);
    @include animation-fill-mode(backwards);
  }
}

@media screen and (max-width: 400px) {
  @include styling(360px, 14px);
}

@media screen and (max-width: 300px) {
  @include styling(270px, 10px);
}

@media screen and (min-width: 400px) {
  @include styling(400px, 14px);
}
